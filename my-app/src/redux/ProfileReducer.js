import {ProfileAPI} from './API'let initialState = {        posts: [            {id: 1, likeCount: 3, text: "Сегодня в нашем королевстве все спокойно"},            {id: 2, likeCount: 2, text: "Сегодня в нашем королевстве все хорошо"},            {id: 3, likeCount: 6, text: "Сегодня в нашем королевстве война, северяне нападают"},            {id: 4, likeCount: 2, text: "Сегодня в нашем королевстве война, северяне напали"}        ],        profile: null,        status: "Set Status",        isOwner: null,        likedPostsID: []}const profileReducer = (state = initialState, action) => {    switch (action.type){        case 'ADD-POST':            let post = {id: 5, likeCount: 0, text: action.text}            return {...state,                posts: [...state.posts, post],        }        case 'UPDATE-PROFILE':            return {...state,                profile: action.getProfile            }        case 'UPDATE-STATUS':            return {...state,                status: action.newStatus            }        case 'UPDATE-PHOTO':            return {...state,                profile: {...state.profile, photos: {...state.profile.photos, large: action.photo}}            }        case 'IS-OWNER':            return {...state,                isOwner: action.boolen            }        case 'AddLikedId':            return {...state,                likedPostsID: [...state.likedPostsID, action.id]            }        case 'RemoveLikedId':            return {...state,                likedPostsID: [...state.likedPostsID.filter(id => id !== action.id)]            }        case 'AddOneLike':            return {...state,                posts: state.posts.map(post => {                    if(post.id === action.id){                        post.likeCount = post.likeCount + 1                        return post                    }                    else {                        return post                    }                    }                )}        case 'RemoveOneLike':            return {...state,                posts: state.posts.map(post => {                        if(post.id === action.id){                            post.likeCount = post.likeCount - 1                            return post                        }                        else {                            return post                        }                    }                )}        case 'SET-PROFILE':            return {...state,                profile: action.profile            }        default:            return state    }}export const AddPostActionCreator = (text) => ({type: 'ADD-POST', text})export const GetProfile = (getProfile) => ({type: 'UPDATE-PROFILE', getProfile: getProfile})export const UpdateStatus = (newStatus) => ({type: 'UPDATE-STATUS', newStatus})export const UpdatePhoto = (photo) => ({type: 'UPDATE-PHOTO', photo})export const SetIsOwner = (boolen) => ({type: 'IS-OWNER', boolen})export const AddLikedPost = (id) => ({type: 'AddLikedId', id})export const RemoveLikedPost = (id) => ({type:'RemoveLikedId', id })export const AddOneLike = (id) => ({type: 'AddOneLike', id})export const RemoveOneLike = (id) => ({type: 'RemoveOneLike', id})export const SetProfile = (profile) => ({type: 'SET-PROFILE', profile})export const SetProfileThunk = (profile) => async (dispatch) => {    debugger    let response =  await ProfileAPI.putProfile(profile)        if(response.data.resultCode === 0){            dispatch(SetProfile(profile))        }}export const getProfileThunk = (userId) => {    return (dispatch) => {        ProfileAPI.getProfile(userId)            .then(data => {dispatch(GetProfile(data))})    }}export const getStatusThunk = (userId) => async (dispatch) => {        let response = await ProfileAPI.getStatus(userId)            dispatch(UpdateStatus(response.data))    return null}export const putStatusThunk = (status) => async (dispatch) => {        let response = await ProfileAPI.putStatus(status)            if(response.data.resultCode === 0){                dispatch(UpdateStatus(status))            }    return null}export const savePhoto = (photo) => async (dispatch) => {    let response = await ProfileAPI.putPhoto(photo)        if(response.data.resultCode === 0){            dispatch(UpdatePhoto(response.data.data.photos.large))        }}export default profileReducer